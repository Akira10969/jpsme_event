name: Security Check - Simple

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  security-check:
    runs-on: ubuntu-latest
    name: Basic Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Check for common PHP security issues
      run: |
        echo "üîç Checking for common PHP security issues..."
        
        # Check for potential security issues
        echo "Checking for eval() usage..."
        if grep -r "eval(" --include="*.php" .; then
          echo "‚ö†Ô∏è WARNING: eval() function found - potential security risk"
        else
          echo "‚úÖ No eval() usage found"
        fi
        
        echo "Checking for exec() usage..."
        if grep -r "exec(" --include="*.php" .; then
          echo "‚ö†Ô∏è WARNING: exec() function found - review for security"
        else
          echo "‚úÖ No exec() usage found"
        fi
        
        echo "Checking for shell_exec() usage..."
        if grep -r "shell_exec(" --include="*.php" .; then
          echo "‚ö†Ô∏è WARNING: shell_exec() function found - review for security"
        else
          echo "‚úÖ No shell_exec() usage found"
        fi
        
        echo "Checking for system() usage..."
        if grep -r "system(" --include="*.php" .; then
          echo "‚ö†Ô∏è WARNING: system() function found - review for security"
        else
          echo "‚úÖ No system() usage found"
        fi
        
        echo "Checking for file_get_contents with URLs..."
        if grep -r "file_get_contents.*http" --include="*.php" .; then
          echo "‚ö†Ô∏è WARNING: file_get_contents with URL found - potential SSRF risk"
        else
          echo "‚úÖ No risky file_get_contents usage found"
        fi
        
        echo "Checking for SQL injection patterns..."
        if grep -r '\$_[A-Z].*SELECT\|SELECT.*\$_[A-Z]' --include="*.php" .; then
          echo "‚ö†Ô∏è WARNING: Potential SQL injection pattern found"
        else
          echo "‚úÖ No obvious SQL injection patterns found"
        fi
        
        echo "Checking for XSS patterns..."
        if grep -r 'echo.*\$_[A-Z]\|print.*\$_[A-Z]' --include="*.php" . | grep -v htmlspecialchars; then
          echo "‚ö†Ô∏è WARNING: Potential XSS vulnerability found - unescaped output"
        else
          echo "‚úÖ No obvious XSS patterns found"
        fi
        
        echo "üéâ Basic security scan completed successfully!"
        
    - name: Check file permissions
      run: |
        echo "üîí Checking file permissions..."
        find . -name "*.php" -perm /o+w -exec echo "‚ö†Ô∏è World-writable PHP file found: {}" \;
        find . -name "*.conf" -perm /o+r -exec echo "‚ö†Ô∏è World-readable config file found: {}" \;
        echo "‚úÖ File permission check completed"
        
    - name: Verify security headers implementation
      run: |
        echo "üõ°Ô∏è Verifying security implementation..."
        
        # Check if security.php exists and has proper headers
        if [ -f "security.php" ]; then
          echo "‚úÖ security.php file found"
          if grep -q "X-Content-Type-Options" security.php; then
            echo "‚úÖ Content-Type-Options header implemented"
          fi
          if grep -q "X-Frame-Options" security.php; then
            echo "‚úÖ Frame-Options header implemented"
          fi
          if grep -q "X-XSS-Protection" security.php; then
            echo "‚úÖ XSS-Protection header implemented"
          fi
        else
          echo "‚ö†Ô∏è security.php file not found"
        fi
        
        # Check for input sanitization
        if grep -r "htmlspecialchars" --include="*.php" .; then
          echo "‚úÖ Input sanitization found"
        else
          echo "‚ö†Ô∏è No input sanitization found"
        fi
        
        echo "üéâ Security verification completed!"
